name: Deploy Backend

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "NODE_ENV=production" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "USER_POOL_ID=${{ secrets.AWS_COGNITO_USER_POOL_ID }}" >> .env
          echo "USER_POOL_CLIENT_ID=${{ secrets.AWS_COGNITO_CLIENT_ID }}" >> .env
          echo "S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env
        
      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Generate Prisma Client
        run: npx prisma generate
        
      - name: Build backend
        run: npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce/backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      # Option 1: Deploy to Elastic Beanstalk
      - name: Generate deployment package
        run: zip -r deploy.zip . -x "node_modules/*" "src/*" ".git/*"
        
      - name: Upload package to S3
        run: aws s3 cp deploy.zip s3://${{ secrets.AWS_EB_BUCKET }}/deploy-${{ github.run_id }}-${{ github.sha }}.zip
        
      - name: Generate unique version label
        id: version-label
        run: echo "VERSION=v-$(date +'%Y%m%d-%H%M%S')-${GITHUB_RUN_NUMBER}-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        
      - name: Create new Elastic Beanstalk version
        run: |
          # Check if application exists, create if it doesn't
          aws elasticbeanstalk describe-applications --application-names ${{ secrets.AWS_EB_APP_NAME }} || \
          aws elasticbeanstalk create-application --application-name ${{ secrets.AWS_EB_APP_NAME }}
          
          # Create new version
          aws elasticbeanstalk create-application-version \
          --application-name ${{ secrets.AWS_EB_APP_NAME }} \
          --version-label "${{ steps.version-label.outputs.VERSION }}" \
          --source-bundle S3Bucket="${{ secrets.AWS_EB_BUCKET }}",S3Key="deploy-${{ github.run_id }}-${{ github.sha }}.zip" \
          --auto-create-application
          
      - name: Wait for application version to be processed (with timeout)
        run: |
          echo "Waiting for application version to be processed..."
          MAX_ATTEMPTS=30
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            STATUS=$(aws elasticbeanstalk describe-application-versions \
              --application-name ${{ secrets.AWS_EB_APP_NAME }} \
              --version-labels "${{ steps.version-label.outputs.VERSION }}" \
              --query "ApplicationVersions[0].Status" \
              --output text)
              
            echo "Current status: $STATUS"
            
            if [ "$STATUS" = "PROCESSED" ]; then
              echo "Application version is now available!"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Application version processing failed!"
              exit 1
            fi
            
            ATTEMPT=$((ATTEMPT+1))
            echo "Waiting for processing... Attempt $ATTEMPT of $MAX_ATTEMPTS"
            sleep 10
          done
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "Timed out waiting for application version to be processed"
            exit 1
          fi
          
      - name: Deploy to Elastic Beanstalk
        run: |
          # Check if environment exists, create if it doesn't
          aws elasticbeanstalk describe-environments --environment-names ${{ secrets.AWS_EB_ENVIRONMENT }} \
          --application-name ${{ secrets.AWS_EB_APP_NAME }} || \
          aws elasticbeanstalk create-environment \
          --application-name ${{ secrets.AWS_EB_APP_NAME }} \
          --environment-name ${{ secrets.AWS_EB_ENVIRONMENT }} \
          --solution-stack-name "64bit Amazon Linux 2023 v6.0.0 running Node.js 18" \
          --version-label "${{ steps.version-label.outputs.VERSION }}"
          
          # Update environment to new version
          aws elasticbeanstalk update-environment \
          --environment-name ${{ secrets.AWS_EB_ENVIRONMENT }} \
          --version-label "${{ steps.version-label.outputs.VERSION }}" 