name: Deploy Backend

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "NODE_ENV=production" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "USER_POOL_ID=${{ secrets.AWS_COGNITO_USER_POOL_ID }}" >> .env
          echo "USER_POOL_CLIENT_ID=${{ secrets.AWS_COGNITO_CLIENT_ID }}" >> .env
          echo "S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env
        
      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Generate Prisma Client
        run: npx prisma generate
        
      - name: Build backend
        run: npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce/backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      # Use AWS EB CLI for deployment
      - name: Install AWS EB CLI
        run: |
          pip install awsebcli
      
      - name: Create EB configuration
        run: |
          # Create .elasticbeanstalk directory
          mkdir -p .elasticbeanstalk
          
          # Create config.yml file
          cat > .elasticbeanstalk/config.yml << EOF
          branch-defaults:
            main:
              environment: ${{ secrets.AWS_EB_ENVIRONMENT }}
          environment-defaults:
            ${{ secrets.AWS_EB_ENVIRONMENT }}:
              branch: null
              repository: null
          global:
            application_name: ${{ secrets.AWS_EB_APP_NAME }}
            default_ec2_keyname: null
            default_platform: Node.js 18
            default_region: ${{ secrets.AWS_REGION }}
            sc: git
          EOF
          
      - name: Deploy to Elastic Beanstalk
        run: |
          # Create application if it doesn't exist
          aws elasticbeanstalk describe-applications --application-names ${{ secrets.AWS_EB_APP_NAME }} || \
          aws elasticbeanstalk create-application --application-name ${{ secrets.AWS_EB_APP_NAME }}
          
          # Check if environment exists, create if it doesn't
          if ! aws elasticbeanstalk describe-environments --environment-names ${{ secrets.AWS_EB_ENVIRONMENT }} --application-name ${{ secrets.AWS_EB_APP_NAME }} | grep -q "EnvironmentName"; then
            echo "Creating environment..."
            aws elasticbeanstalk create-environment \
              --application-name ${{ secrets.AWS_EB_APP_NAME }} \
              --environment-name ${{ secrets.AWS_EB_ENVIRONMENT }} \
              --solution-stack-name "64bit Amazon Linux 2023 v6.0.0 running Node.js 18"
            
            # Wait for environment to be created
            echo "Waiting for environment to be ready..."
            aws elasticbeanstalk wait environment-exists --environment-names ${{ secrets.AWS_EB_ENVIRONMENT }}
          fi
          
          # Generate a unique version label using commit SHA and timestamp
          VERSION_LABEL="app-$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:8}"
          echo "Deploying version: $VERSION_LABEL"
          
          # Deploy using AWS EB CLI with unique version label and verbose logging
          eb deploy ${{ secrets.AWS_EB_ENVIRONMENT }} --staged --label $VERSION_LABEL --verbose 