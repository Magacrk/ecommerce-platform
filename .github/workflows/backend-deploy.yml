name: Deploy Backend

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Set up environment variables
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "NODE_ENV=production" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "USER_POOL_ID=${{ secrets.AWS_COGNITO_USER_POOL_ID }}" >> .env
          echo "USER_POOL_CLIENT_ID=${{ secrets.AWS_COGNITO_CLIENT_ID }}" >> .env
          echo "S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env
        
      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          
      - name: Generate Prisma Client
        run: npx prisma generate
        
      - name: Build backend
        run: npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce/backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      # Option 1: Deploy to Elastic Beanstalk
      - name: Generate deployment package
        run: zip -r deploy.zip . -x "node_modules/*" "src/*" ".git/*"
        
      - name: Upload package to S3
        run: aws s3 cp deploy.zip s3://${{ secrets.AWS_EB_BUCKET }}/deploy.zip
        
      - name: Create new Elastic Beanstalk version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ secrets.AWS_EB_APP_NAME }} \
          --version-label "ver-${{ github.sha }}" \
          --source-bundle S3Bucket="${{ secrets.AWS_EB_BUCKET }}",S3Key="deploy.zip"
          
      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment \
          --environment-name ${{ secrets.AWS_EB_ENVIRONMENT }} \
          --version-label "ver-${{ github.sha }}" 