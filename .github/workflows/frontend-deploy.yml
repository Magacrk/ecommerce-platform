name: Deploy Frontend

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Create .env file
        working-directory: ./frontend
        run: |
          echo "VITE_API_BASE_URL=${{ secrets.BACKEND_URL }}/api" > .env
          echo "VITE_AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "VITE_USER_POOL_ID=${{ secrets.AWS_COGNITO_USER_POOL_ID }}" >> .env
          echo "VITE_USER_POOL_CLIENT_ID=${{ secrets.AWS_COGNITO_CLIENT_ID }}" >> .env
          echo "VITE_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}" >> .env
          echo "VITE_IDENTITY_POOL_ID=${{ secrets.AWS_COGNITO_IDENTITY_POOL_ID }}" >> .env
          echo "VITE_SKIP_AWS_CONFIG=false" >> .env
          echo "VITE_USE_MOCK_DATA=false" >> .env
        
      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        
      - name: Update environment config
        run: |
          # Check which build directory exists
          BUILD_DIR="frontend/dist"
          if [ -d "frontend/build" ]; then
            BUILD_DIR="frontend/build"
          fi
          
          echo "Using build directory: $BUILD_DIR"
          
          # Copy env-config.js to build output if it doesn't exist
          if [ ! -f "$BUILD_DIR/env-config.js" ]; then
            cp frontend/public/env-config.js $BUILD_DIR/
          fi
          
          # Replace placeholders with actual values in env-config.js
          sed -i "s|__BACKEND_URL__|${{ secrets.BACKEND_URL }}|g" $BUILD_DIR/env-config.js
          sed -i "s|__AWS_REGION__|${{ secrets.AWS_REGION }}|g" $BUILD_DIR/env-config.js
          sed -i "s|__AWS_COGNITO_USER_POOL_ID__|${{ secrets.AWS_COGNITO_USER_POOL_ID }}|g" $BUILD_DIR/env-config.js
          sed -i "s|__AWS_COGNITO_CLIENT_ID__|${{ secrets.AWS_COGNITO_CLIENT_ID }}|g" $BUILD_DIR/env-config.js
          sed -i "s|__AWS_S3_BUCKET__|${{ secrets.AWS_S3_BUCKET }}|g" $BUILD_DIR/env-config.js
          sed -i "s|__AWS_COGNITO_IDENTITY_POOL_ID__|${{ secrets.AWS_COGNITO_IDENTITY_POOL_ID }}|g" $BUILD_DIR/env-config.js
          
          # Replace placeholders in the index.html file
          sed -i "s|%%AWS_REGION%%|${{ secrets.AWS_REGION }}|g" $BUILD_DIR/index.html
          sed -i "s|%%AWS_COGNITO_USER_POOL_ID%%|${{ secrets.AWS_COGNITO_USER_POOL_ID }}|g" $BUILD_DIR/index.html
          sed -i "s|%%AWS_COGNITO_CLIENT_ID%%|${{ secrets.AWS_COGNITO_CLIENT_ID }}|g" $BUILD_DIR/index.html
          sed -i "s|%%AWS_COGNITO_IDENTITY_POOL_ID%%|${{ secrets.AWS_COGNITO_IDENTITY_POOL_ID }}|g" $BUILD_DIR/index.html
          sed -i "s|%%S3_BUCKET%%|${{ secrets.AWS_S3_BUCKET }}|g" $BUILD_DIR/index.html
          sed -i "s|%%S3_REGION%%|${{ secrets.AWS_REGION }}|g" $BUILD_DIR/index.html
          sed -i "s|%%BACKEND_URL%%|${{ secrets.BACKEND_URL }}|g" $BUILD_DIR/index.html
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push Docker image to Amazon ECR
        working-directory: ./frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce/frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
      # Deploy to S3/CloudFront
      - name: Upload to S3
        run: |
          # Use the same build directory detection as in the previous step
          BUILD_DIR="frontend/dist"
          if [ -d "frontend/build" ]; then
            BUILD_DIR="frontend/build"
          fi
          
          echo "Uploading from $BUILD_DIR to S3"
          aws s3 sync $BUILD_DIR/ s3://${{ secrets.AWS_S3_BUCKET }} --delete
        
      - name: Invalidate CloudFront cache
        if: success()
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*" 