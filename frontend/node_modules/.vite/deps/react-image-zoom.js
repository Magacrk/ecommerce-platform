import {
  require_prop_types
} from "./chunk-DAYKXJCD.js";
import {
  require_react
} from "./chunk-OE6NBOXF.js";
import {
  __commonJS
} from "./chunk-AUZ3RYOM.js";

// node_modules/js-image-zoom/js-image-zoom.js
var require_js_image_zoom = __commonJS({
  "node_modules/js-image-zoom/js-image-zoom.js"(exports, module) {
    (function(root, factory) {
      if (typeof module !== "undefined" && module.exports) {
        module.exports = factory();
      } else {
        root.ImageZoom = factory();
      }
    })(exports, function() {
      return function ImageZoom(container, opts) {
        "use strict";
        var options = opts;
        if (!container) {
          return;
        }
        var data = {
          sourceImg: {
            element: null,
            width: 0,
            height: 0,
            naturalWidth: 0,
            naturalHeight: 0
          },
          zoomedImgOffset: {
            vertical: 0,
            horizontal: 0
          },
          zoomedImg: {
            element: null,
            width: 0,
            height: 0
          },
          zoomLens: {
            element: null,
            width: 0,
            height: 0
          }
        };
        var div = document.createElement("div");
        var lensDiv = document.createElement("div");
        var scaleX;
        var scaleY;
        var offset;
        data.zoomedImgOffset = {
          vertical: options.offset && options.offset.vertical ? options.offset.vertical : 0,
          horizontal: options.offset && options.offset.horizontal ? options.offset.horizontal : 0
        };
        data.zoomPosition = options.zoomPosition || "right";
        data.zoomContainer = options.zoomContainer ? options.zoomContainer : container;
        function getOffset(el) {
          if (el) {
            var elRect = el.getBoundingClientRect();
            return { left: elRect.left, top: elRect.top };
          }
          return { left: 0, top: 0 };
        }
        function leftLimit(min) {
          return options.width - min;
        }
        function topLimit(min) {
          return options.height - min;
        }
        function getValue(val, min, max) {
          if (val < min) {
            return min;
          }
          if (val > max) {
            return max;
          }
          return val;
        }
        function getPosition(v, min, max) {
          var value = getValue(v, min, max);
          return value - min;
        }
        function zoomLensLeft(left) {
          var leftMin = data.zoomLens.width / 2;
          return getPosition(left, leftMin, leftLimit(leftMin));
        }
        function zoomLensTop(top) {
          var topMin = data.zoomLens.height / 2;
          return getPosition(top, topMin, topLimit(topMin));
        }
        function setZoomedImgSize(options2, data2) {
          if (options2.scale) {
            data2.zoomedImg.element.style.width = options2.width * options2.scale + "px";
            data2.zoomedImg.element.style.height = options2.height * options2.scale + "px";
          } else if (options2.zoomWidth) {
            data2.zoomedImg.element.style.width = options2.zoomWidth + "px";
            data2.zoomedImg.element.style.height = data2.sourceImg.element.style.height;
          } else {
            data2.zoomedImg.element.style.width = "100%";
            data2.zoomedImg.element.style.height = "100%";
          }
        }
        function onSourceImgLoad() {
          options.height = options.height || data.sourceImg.element.height;
          data.sourceImg.element.style.height = options.height + "px";
          options.width = options.width || data.sourceImg.element.width;
          data.sourceImg.element.style.width = options.width + "px";
          setZoomedImgSize(options, data);
          data.sourceImg.naturalWidth = data.sourceImg.element.naturalWidth;
          data.sourceImg.naturalHeight = data.sourceImg.element.naturalHeight;
          data.zoomedImg.element.style.backgroundSize = data.sourceImg.naturalWidth + "px " + data.sourceImg.naturalHeight + "px";
          if (options.zoomStyle) {
            data.zoomedImg.element.style.cssText += options.zoomStyle;
          }
          if (options.zoomLensStyle) {
            data.zoomLens.element.style.cssText += options.zoomLensStyle;
          } else {
            data.zoomLens.element.style.background = "white";
            data.zoomLens.element.style.opacity = "0.4";
          }
          scaleX = data.sourceImg.naturalWidth / options.width;
          scaleY = data.sourceImg.naturalHeight / options.height;
          offset = getOffset(data.sourceImg.element);
          if (options.scale) {
            data.zoomLens.width = options.width / (data.sourceImg.naturalWidth / (options.width * options.scale));
            data.zoomLens.height = options.height / (data.sourceImg.naturalHeight / (options.height * options.scale));
          } else if (options.zoomWidth) {
            data.zoomLens.width = options.zoomWidth / scaleX;
            data.zoomLens.height = options.height / scaleY;
          } else {
            data.zoomedImg.element.style.display = "block";
            data.zoomLens.width = data.zoomedImg.element.clientWidth / scaleX;
            data.zoomLens.height = data.zoomedImg.element.clientHeight / scaleY;
            data.zoomedImg.element.style.display = "none";
          }
          data.zoomLens.element.style.position = "absolute";
          data.zoomLens.element.style.width = data.zoomLens.width + "px";
          data.zoomLens.element.style.height = data.zoomLens.height + "px";
          data.zoomLens.element.pointerEvents = "none";
        }
        function setup() {
          if (options.img) {
            var img = document.createElement("img");
            img.src = options.img;
            data.sourceImg.element = container.appendChild(img);
          } else {
            data.sourceImg.element = container.children[0];
            if (data.sourceImg.element.nodeName !== "IMG") {
              data.sourceImg.element = data.sourceImg.element.querySelector("img");
            }
          }
          options = options || {};
          container.style.position = "relative";
          data.sourceImg.element.style.width = options.width ? options.width + "px" : "auto";
          data.sourceImg.element.style.height = options.height ? options.height + "px" : "auto";
          data.zoomLens.element = container.appendChild(lensDiv);
          data.zoomLens.element.style.display = "none";
          data.zoomLens.element.classList.add("js-image-zoom__zoomed-area");
          data.zoomedImg.element = data.zoomContainer.appendChild(div);
          data.zoomedImg.element.classList.add("js-image-zoom__zoomed-image");
          data.zoomedImg.element.style.backgroundImage = "url('" + data.sourceImg.element.src + "')";
          data.zoomedImg.element.style.backgroundRepeat = "no-repeat";
          data.zoomedImg.element.style.display = "none";
          switch (data.zoomPosition) {
            case "left":
              data.zoomedImg.element.style.position = "absolute";
              data.zoomedImg.element.style.top = data.zoomedImgOffset.vertical + "px";
              data.zoomedImg.element.style.left = data.zoomedImgOffset.horizontal - data.zoomedImgOffset.horizontal * 2 + "px";
              data.zoomedImg.element.style.transform = "translateX(-100%)";
              break;
            case "top":
              data.zoomedImg.element.style.position = "absolute";
              data.zoomedImg.element.style.top = data.zoomedImgOffset.vertical - data.zoomedImgOffset.vertical * 2 + "px";
              data.zoomedImg.element.style.left = "calc(50% + " + data.zoomedImgOffset.horizontal + "px)";
              data.zoomedImg.element.style.transform = "translate3d(-50%, -100%, 0)";
              break;
            case "bottom":
              data.zoomedImg.element.style.position = "absolute";
              data.zoomedImg.element.style.bottom = data.zoomedImgOffset.vertical - data.zoomedImgOffset.vertical * 2 + "px";
              data.zoomedImg.element.style.left = "calc(50% + " + data.zoomedImgOffset.horizontal + "px)";
              data.zoomedImg.element.style.transform = "translate3d(-50%, 100%, 0)";
              break;
            case "original":
              data.zoomedImg.element.style.position = "absolute";
              data.zoomedImg.element.style.top = "0px";
              data.zoomedImg.element.style.left = "0px";
              break;
            default:
              data.zoomedImg.element.style.position = "absolute";
              data.zoomedImg.element.style.top = data.zoomedImgOffset.vertical + "px";
              data.zoomedImg.element.style.right = data.zoomedImgOffset.horizontal - data.zoomedImgOffset.horizontal * 2 + "px";
              data.zoomedImg.element.style.transform = "translateX(100%)";
              break;
          }
          container.addEventListener("mousemove", events, false);
          container.addEventListener("mouseenter", events, false);
          container.addEventListener("mouseleave", events, false);
          data.zoomLens.element.addEventListener("mouseenter", events, false);
          data.zoomLens.element.addEventListener("mouseleave", events, false);
          window.addEventListener("scroll", events, false);
          return data;
        }
        function kill() {
          container.removeEventListener("mousemove", events, false);
          container.removeEventListener("mouseenter", events, false);
          container.removeEventListener("mouseleave", events, false);
          data.zoomLens.element.removeEventListener("mouseenter", events, false);
          data.zoomLens.element.removeEventListener("mouseleave", events, false);
          window.removeEventListener("scroll", events, false);
          if (data.zoomLens && data.zoomedImg) {
            container.removeChild(data.zoomLens.element);
            data.zoomContainer.removeChild(data.zoomedImg.element);
          }
          if (options.img) {
            container.removeChild(data.sourceImg.element);
          } else {
            data.sourceImg.element.style.width = "";
            data.sourceImg.element.style.height = "";
          }
          return data;
        }
        var events = {
          handleEvent: function(event) {
            switch (event.type) {
              case "mousemove":
                return this.handleMouseMove(event);
              case "mouseenter":
                return this.handleMouseEnter(event);
              case "mouseleave":
                return this.handleMouseLeave(event);
              case "scroll":
                return this.handleScroll(event);
            }
          },
          handleMouseMove: function(event) {
            var offsetX;
            var offsetY;
            var backgroundTop;
            var backgroundRight;
            var backgroundPosition;
            if (offset) {
              offsetX = zoomLensLeft(event.clientX - offset.left);
              offsetY = zoomLensTop(event.clientY - offset.top);
              backgroundTop = offsetX * scaleX;
              backgroundRight = offsetY * scaleY;
              backgroundPosition = "-" + backgroundTop + "px -" + backgroundRight + "px";
              data.zoomedImg.element.style.backgroundPosition = backgroundPosition;
              data.zoomLens.element.style.cssText += "top:" + offsetY + "px;left:" + offsetX + "px;display: block;";
            }
          },
          handleMouseEnter: function() {
            data.zoomedImg.element.style.display = "block";
            data.zoomLens.element.style.display = "block";
          },
          handleMouseLeave: function() {
            data.zoomedImg.element.style.display = "none";
            data.zoomLens.element.style.display = "none";
          },
          handleScroll: function() {
            offset = getOffset(data.sourceImg.element);
          }
        };
        setup();
        if (data.sourceImg.element.complete) {
          onSourceImgLoad();
        } else {
          data.sourceImg.element.onload = onSourceImgLoad;
        }
        return {
          setup: function() {
            setup();
          },
          kill: function() {
            kill();
          },
          _getInstanceInfo: function() {
            return {
              setup,
              kill,
              onSourceImgLoad,
              data,
              options
            };
          }
        };
      };
    });
  }
});

// node_modules/react-image-zoom/index.js
var require_react_image_zoom = __commonJS({
  "node_modules/react-image-zoom/index.js"(exports, module) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    var _jsImageZoom = require_js_image_zoom();
    var _jsImageZoom2 = _interopRequireDefault(_jsImageZoom);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var ReactImageZoom = function(_React$Component) {
      _inherits(ReactImageZoom2, _React$Component);
      function ReactImageZoom2(props) {
        _classCallCheck(this, ReactImageZoom2);
        var _this = _possibleConstructorReturn(this, (ReactImageZoom2.__proto__ || Object.getPrototypeOf(ReactImageZoom2)).call(this, props));
        _this.container = void 0;
        _this.getRef = _this.getRef.bind(_this);
        return _this;
      }
      _createClass(ReactImageZoom2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.rerenderImageZoom(this.props);
        }
      }, {
        key: "UNSAFE_componentWillUnmount",
        value: function UNSAFE_componentWillUnmount() {
          this.imageZoom.kill();
          this.imageZoom = void 0;
        }
      }, {
        key: "UNSAFE_componentWillReceiveProps",
        value: function UNSAFE_componentWillReceiveProps(nextProps) {
          if (this.props !== nextProps) {
            this.kill();
            this.rerenderImageZoom(nextProps);
          }
        }
      }, {
        key: "rerenderImageZoom",
        value: function rerenderImageZoom(props) {
          this.imageZoom = new _jsImageZoom2.default(this.container, JSON.parse(JSON.stringify(props)));
        }
      }, {
        key: "setup",
        value: function setup() {
          this.imageZoom.setup();
        }
      }, {
        key: "kill",
        value: function kill() {
          this.imageZoom.kill();
        }
      }, {
        key: "getRef",
        value: function getRef(ref) {
          this.container = ref;
        }
      }, {
        key: "render",
        value: function render() {
          return _react2.default.createElement("div", { ref: this.getRef });
        }
      }]);
      return ReactImageZoom2;
    }(_react2.default.Component);
    ReactImageZoom.propTypes = {
      width: _propTypes2.default.number,
      img: _propTypes2.default.string,
      height: _propTypes2.default.number,
      zoomWidth: _propTypes2.default.number,
      scale: _propTypes2.default.number,
      offset: _propTypes2.default.object,
      zoomStyle: _propTypes2.default.string,
      zoomLensStyle: _propTypes2.default.string,
      zoomPosition: _propTypes2.default.oneOf(["top", "left", "bottom", "right", "original"])
    };
    exports.default = ReactImageZoom;
    module.exports = exports["default"];
  }
});
export default require_react_image_zoom();
//# sourceMappingURL=react-image-zoom.js.map
